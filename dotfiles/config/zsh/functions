# AWS #
function awsdecodeerr {
	readonly encodedmessage=${1:?"Encoded message must be specified."}
 	aws sts decode-authorization-message --encoded-message $encodedmessage --query DecodedMessage --output text | jq '.'
}

# HTTPIE #
function msr {
	readonly address=${1:?"Address must be specified."}
	readonly endpoint=${2:?"REST endpoint must be specified."}
	readonly endpoint_id=${3}
	readonly auth=$MOTHERSHIP_AUTH
	if [[ $endpoint_id == "" ]]; then
		https --verify false GET "$address/$endpoint" Authorization:$auth
	else
		https --verify false GET "$address/$endpoint?endpoint_id=$endpoint_id" Authorization:$auth
	fi
}

# Z #
function zk() {
	__zoxide_z "$1" && k
}

# FZF #
function frm() {
  if [[ "$#" -eq 0 ]]; then
    local files
    files=$(find . -maxdepth 1 -type f | fzf --multi)
    echo $files | xargs -I '{}' rm {} #we use xargs to capture filenames with spaces in them properly
  else
    command rm "$@"
  fi
}

function fman() {
	MAN="/usr/bin/man"
	if [ -n "$1" ]; then
		$MAN "$@"
		return $?
	else
		$MAN -k . | fzf --reverse --preview="echo {1,2} | sed 's/ (/./' | sed -E 's/\)\s*$//' | xargs $MAN" | awk '{print $1 "." $2}' | tr -d '()' | xargs -r $MAN
		return $?
	fi
}

function falias() {
    CMD=$(
        (
            (alias)
            (functions | grep "()" | cut -d ' ' -f1 | grep -v "^_" )
        ) | fzf | cut -d '=' -f1
    );

    eval $CMD
}

function ffile() {
  local file=$(fzf --multi --reverse) #get file from fzf
  if [[ $file ]]; then
    for prog in $(echo $file); #open all the selected files
    do; $EDITOR $prog; done;
  else
    echo "cancelled fzf"
  fi
}

function fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}
